makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
makeCacheMatrix()
x <- makeCacheMatrix()
cacheSolve(x)
matrix(c(1,2,3,11,12,13),nrow=2,ncol=3)
matrix(c(1,2,11,12),nrow=2,ncol=2)
m <- matrix(c(1,2,11,12),nrow=2,ncol=2)
x <- makeCacheMatrix(m)
cacheSolve(x)
solve(m)
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length)
mean(iris[iris$Sepal.Species=="virginica",]$Sepal.Length)
iris[iris$Sepal.Species="virginica",]
iris[iris$Sepal.Species=="virginica",]
iris[Sepal.Species=="virginica",]
iris
library(datasets)
data(iris)
iris
iris[iris$Species=="virginica",]
mean(iris[iris$Species=="virginica",]$Sepal.Length
sadf
mean(iris[iris$Species=="virginica",]$Sepal.Length)
rowMeans(iris[,1:4])
apply(iris,2,mean)
apply(iris,1,mean)
apply(iris[,1:f],2,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?,tcars
?mtcars
mean(mtcars$mpg,mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars,2,mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg,cyl,mean))
with(mtcars, tapply(hp,cyl,mean))
debug(ls)
ls
